parameters:
- name: DotNetCoreSdkVersion
  type: string
  default: '3.1.101'
- name: ApiFrameworkVersion
  type: string
  default: 'netcoreapp3.1'
- name: FunctionFrameworkVersion
  type: string
  default: 'netcoreapp3.1'
- name: ProjectName
  type: string
  default: ''
- name: BuildConfiguration
  type: string
  default: 'Release'
- name: vstsFeed
  type: string
  default: 'ecf37bc0-472b-47bf-91e3-6774809fd194'
- name: BuildApi
  type: boolean
  default: true
- name: BuildFunction
  type: boolean
  default: true

steps:
 - task: UseDotNet@2
   displayName: 'Use .NET Core sdk ${{ parameters.DotNetCoreSdkVersion }}'
   inputs:
     version: ${{ parameters.DotNetCoreSdkVersion }}

 - task: DotNetCoreCLI@2
   displayName: 'dotnet restore'
   inputs:
     command: restore
     vstsFeed: '${{ parameters.vstsFeed }}'
     projects: |
      **/*.${{ parameters.ProjectName }}.*Tests/*.csproj
      **/*.Models.*UnitTests/*.csproj
      CalculateFunding.Api.${{ parameters.ProjectName }}/CalculateFunding.Api.{{ parameters.ProjectName }}.csproj
      CalculateFunding.Functions.${{ parameters.ProjectName }}/CalculateFunding.Functions.{{ parameters.ProjectName }}.csproj

 - task: DotNetCoreCLI@2
   displayName: 'dotnet test for Service, Functions and Models'
   inputs:
     command: test
     arguments: '--configuration ${{ parameters.BuildConfiguration }} /p:AssemblyVersion=$(Build.BuildNumber)'
     projects: |
      **/*.${{ parameters.ProjectName }}*UnitTests/*.csproj
      **/*.${{ parameters.ProjectName }}*AcceptanceTests/*.csproj
      **/*.Models.*UnitTests/*.csproj

 - task: DotNetCoreCLI@2
   displayName: 'dotnet test for API'
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   inputs:
     command: restore
     arguments: '--configuration ${{ parameters.BuildConfiguration }} /p:AssemblyVersion=$(Build.BuildNumber)'
     projects: |
      !**/*.Api.${{ parameters.ProjectName }}*SmokeTests/*.csproj
      **/*.Api.${{ parameters.ProjectName }}*Tests/*.csproj

 - task: DotNetCoreCLI@2
   displayName: "dotnet publish API"
   condition: and(succeeded(), eq('${{ parameters.BuildApi }}', true))
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.BuildConfiguration }} /p:AssemblyVersion=$(Build.BuildNumber)'
     projects: 'CalculateFunding.Api.${{ parameters.ProjectName }}/CalculateFunding.Api.${{ parameters.ProjectName }}.csproj'

 - task: DotNetCoreCLI@2
   displayName: "dotnet publish Function"
   condition: and(succeeded(), eq('${{ parameters.BuildFunction }}', true))
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.BuildConfiguration }} /p:AssemblyVersion=$(Build.BuildNumber)'
     projects: 'CalculateFunding.Functions.${{ parameters.ProjectName }}/CalculateFunding.Functions.${{ parameters.ProjectName }}.csproj'

 - task: ArchiveFiles@2
   displayName: 'Zip CalculateFunding.Api.${{ parameters.ProjectName }}.zip'
   condition: and(succeeded(), eq( '${{ parameters.BuildApi }}', true))
   inputs:
    rootFolderOrFile: 'CalculateFunding.Api.${{ parameters.ProjectName }}\bin\${{ parameters.BuildConfiguration }}\${{ parameters.ApiFrameworkVersion }}\publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/CalculateFunding.Api.${{ parameters.ProjectName }}.zip'

 - task: ArchiveFiles@2
   displayName: 'Zip CalculateFunding.Functions.${{ parameters.ProjectName }}.zip'
   condition: and(succeeded(), eq('${{ parameters.BuildFunction }}', true))
   inputs:
    rootFolderOrFile: 'CalculateFunding.Functions.${{ parameters.ProjectName }}\bin\${{ parameters.BuildConfiguration }}\${{ parameters.ApiFrameworkVersion }}\publish'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.zip'

 - task: CopyFiles@2
   displayName: "Copy DevOps Scripts"
   inputs:
    SourceFolder: DevOps
    Contents: |
      *.ps1
      **/*.json
      *.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)/DevOps'

 - task: PublishPipelineArtifact@1
   displayName: 'Publish Artifact'
   inputs:
    targetPath: $(build.artifactstagingdirectory)
    artifactName: drop

 - powershell: |
    dir
    Write-Host "Project: ${{ parameters.ProjectName }}"
    $myPath = "$(Build.Repository.LocalPath)" + '\' + 'CalculateFunding.Functions.' + "${{ parameters.ProjectName }}" + '.SmokeTests'
    Write-Host "Path: $myPath"
    If (Test-Path -LiteralPath $myPath -PathType container) {
      Write-Host "##vso[task.setvariable variable=ExecuteMyTask]True"
      Write-Host "I set ExecuteMyTask to True"
    }
    Else {
      Write-Host "##vso[task.setvariable variable=ExecuteMyTask]False"
      Write-Host "I set ExecuteMyTask to False"
    }
   displayName: 'Check for Policy / Provider Project and Set ExecuteMyTask False if found'

 - task: DotNetCoreCLI@2
   displayName: "dotnet publish Function Smoke Test"
   condition: and(succeeded(), eq('$(ExecuteMyTask)', true))
   inputs:
     command: publish
     publishWebProjects: false
     zipAfterPublish: false
     arguments: '--configuration ${{ parameters.BuildConfiguration }} /p:AssemblyVersion=$(Build.BuildNumber)' --output $(Build.ArtifactStagingDirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests'
     projects: 'CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests.csproj

 - task: PublishPipelineArtifact@1
   condition: and(succeeded(), eq('$(ExecuteMyTask)', true))
   displayName: 'Publish Artifact'
   inputs:
    targetPath: ' $(build.artifactstagingdirectory)/CalculateFunding.Functions.${{ parameters.ProjectName }}.SmokeTests'
    artifactName: Smoketest